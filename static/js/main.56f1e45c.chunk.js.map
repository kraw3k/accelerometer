{"version":3,"sources":["Home.js","SensorDevice.js","ClientDevice.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","SensorDevice","_ref","socket","react_accelerometer_module","position","emit","JSON","stringify","x","Math","round","y","z","Square","styled","div","_templateObject","props","ClientDevice","_useState","useState","_useState2","Object","slicedToArray","setPosition","useEffect","on","data","parse","abs","App","_useSocket","useSocket","react_router_dom","basename","id","exact","to","activeClassName","react_router","path","src_Home","src_ClientDevice","src_SensorDevice","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56f1e45c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>About the project</h1>\r\n      <p>This is a simple app to interchange data in realtime.</p>\r\n      <p>\r\n        The idea is to send some data from one device to another.\r\n      </p>\r\n      <h2>You need to use minimum two devices:</h2>\r\n      <ul>\r\n        <li>one of them should has accelerometer (it will send position data)</li>\r\n        <li>another device to display received data</li>\r\n      </ul>\r\n      <h2>Used technologies</h2>\r\n      <ul>\r\n        <li>React.js</li>\r\n        <li>Node.js</li>\r\n        <li>Socket.io</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport ReactAccelerometer from \"react-accelerometer\";\r\n\r\nconst SensorDevice = ({ socket }) => (\r\n  <ReactAccelerometer>\r\n    {position => {\r\n      if (position) {\r\n        socket.emit(\r\n          \"dataFromSensor\",\r\n          JSON.stringify({\r\n            position: {\r\n              x: Math.round(position.x),\r\n              y: Math.round(position.y),\r\n              z: Math.round(position.z)\r\n            }\r\n          })\r\n        );\r\n        return (\r\n          <div>\r\n            <ul>\r\n              <li>x: {Math.round(position.x)}</li>\r\n              <li>y: {Math.round(position.y)}</li>\r\n              <li>z: {Math.round(position.z)}</li>\r\n            </ul>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div>\r\n          <h1>Accelerometer isn't supported on this device</h1>\r\n          <p>You can use this device as a client part of app</p>\r\n        </div>\r\n      );\r\n    }}\r\n  </ReactAccelerometer>\r\n);\r\nexport default SensorDevice;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Square = styled.div`\r\n  height: 10vw;\r\n  width: 10vw;\r\n  background: rgb(\r\n    ${props => props.position.x},\r\n    ${props => props.position.y},\r\n    ${props => props.position.z}\r\n  );\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ClientDevice = ({ socket }) => {\r\n  const [position, setPosition] = useState(null);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"dataFromServer\", data => {\r\n      const { position } = JSON.parse(data);\r\n      setPosition({\r\n        x: Math.abs(position.x * 25),\r\n        y: Math.abs(position.y * 25),\r\n        z: Math.abs(position.z * 25)\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return position ? (\r\n    <div>\r\n      <Square position={position} />\r\n      <h2>\r\n        rgb({position.x}, {position.y}, {position.z})\r\n      </h2>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <h1>One more thing!</h1>\r\n      <p>\r\n        Now open this site in sensor mode on device with accelerometer and ...\r\n      </p>\r\n      <p>... let's the magic begin!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientDevice;\r\n","import React from \"react\";\r\nimport { HashRouter, Route, NavLink } from \"react-router-dom\";\r\nimport useSocket from \"use-socket.io-client\";\r\n\r\nimport Home from \"./Home\";\r\nimport SensorDevice from \"./SensorDevice\";\r\nimport ClientDevice from \"./ClientDevice\";\r\n\r\nconst App = () => {\r\n  const [socket] = useSocket(\"https://kraw3k.ct8.pl/\");\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <div id=\"menu\">\r\n        <NavLink exact to=\"/\" activeClassName=\"activeLink\">\r\n          Home\r\n        </NavLink>\r\n        <NavLink exact to=\"/sensor\" activeClassName=\"activeLink\">\r\n          Sensor\r\n        </NavLink>\r\n        <NavLink exact to=\"/client\" activeClassName=\"activeLink\">\r\n          Client\r\n        </NavLink>\r\n      </div>\r\n      <div id=\"content\">\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route exact path=\"/client\">\r\n          <ClientDevice socket={socket} />\r\n        </Route>\r\n        <Route exact path=\"/sensor\">\r\n          <SensorDevice socket={socket} />\r\n        </Route>\r\n      </div>\r\n      <a id=\"websiteLink\" href=\"https://kraw3k.github.io\">\r\n        kraw3k.github.io\r\n      </a>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}