{"version":3,"sources":["Home.js","SensorDevice.js","ClientDevice.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","Home","react_default","a","createElement","react_router_dom","to","process","href","SensorDevice","_useSocket","useSocket","autoConnect","socket","Object","slicedToArray","react_accelerometer_module","position","emit","JSON","stringify","x","Math","round","y","z","style","textAlign","ClientDevice","_useState","useState","_useState2","data","setData","theme","parse","concat","abs","Square","ul","ClientDevice_templateObject","props","styled_components_browser_esm","App","lib","url","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4fb10d7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  /* display: flex;\r\n  align-items: center;\r\n  justify-content: center; */\r\n`;\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Wrapper>\r\n      <h2>Choose how to use this device</h2>\r\n      <p>\r\n        <Link to={process.env.PUBLIC_URL + \"/sensor\"}>Sensor device</Link>\r\n      </p>\r\n      <p>\r\n        <Link to={process.env.PUBLIC_URL + \"/client\"}>Client device</Link>\r\n      </p>\r\n      <h5>\r\n        <a href=\"https://kraw3k.github.io\">kraw3k.github.io</a>\r\n      </h5>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport ReactAccelerometer from \"react-accelerometer\";\r\nimport useSocket from \"use-socket.io-client\";\r\n\r\nconst SensorDevice = () => {\r\n  const [socket] = useSocket(\"https://kraw3k.ct8.pl/\", {\r\n    autoConnect: true\r\n  });\r\n\r\n  return (\r\n    <ReactAccelerometer>\r\n      {position => {\r\n        if (!position) {\r\n          return (\r\n            <div>\r\n              <h2>Accelerometer isn't supported on this device</h2>\r\n              <p>\r\n                You can use this device as a\r\n                <Link to={process.env.PUBLIC_URL + \"/client\"}>\r\n                  <u>client part</u>\r\n                </Link>\r\n                of app\r\n              </p>\r\n            </div>\r\n          );\r\n        }\r\n        socket.emit(\r\n          \"dataFromSensor\",\r\n          JSON.stringify({\r\n            position: {\r\n              x: Math.round(position.x),\r\n              y: Math.round(position.y),\r\n              z: Math.round(position.z)\r\n            }\r\n          })\r\n        );\r\n        return (\r\n          <div>\r\n            <ul style={{ textAlign: \"left\" }}>\r\n              <li>x: {Math.round(position.x)}</li>\r\n              <li>y: {Math.round(position.y)}</li>\r\n              <li>z: {Math.round(position.z)}</li>\r\n            </ul>\r\n            <h5>\r\n              <Link to={process.env.PUBLIC_URL + \"/\"}>\r\n                <u>go back</u>\r\n              </Link>\r\n            </h5>\r\n          </div>\r\n        );\r\n      }}\r\n    </ReactAccelerometer>\r\n  );\r\n};\r\nexport default SensorDevice;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport { useSocket } from \"use-socketio\";\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\n// import { Motion, spring } from \"react-motion\";\r\n\r\nconst ClientDevice = () => {\r\n  const [data, setData] = useState();\r\n  const socket = useSocket(\"dataFromServer\", data => setData(JSON.parse(data)));\r\n\r\n  let theme = {\r\n    x: data ? `${Math.abs(data.position.x * 25)}` : \"255\",\r\n    y: data ? `${Math.abs(data.position.y * 25)}` : \"255\",\r\n    z: data ? `${Math.abs(data.position.z * 25)}` : \"255\"\r\n  };\r\n  const Square = styled.ul`\r\n    height: 10vw;\r\n    width: 10vw;\r\n    background: rgb(\r\n      ${props => props.theme.x},\r\n      ${props => props.theme.y},\r\n      ${props => props.theme.z}\r\n    );\r\n    margin: 0 auto;\r\n  `;\r\n\r\n  return data ? (\r\n    <ThemeProvider theme={theme}>\r\n      <div>\r\n        <Square />\r\n        <p>\r\n          rgb({theme.x}, {theme.y}, {theme.z})\r\n        </p>\r\n      </div>\r\n    </ThemeProvider>\r\n  ) : (\r\n    <div>\r\n      <p>\r\n        Now open this site on device with accelerometer (smartphone for example)\r\n        and let's the magic begin!\r\n      </p>\r\n      <h5>\r\n        <Link to={process.env.PUBLIC_URL + \"/\"}>\r\n          <u>go back</u>\r\n        </Link>\r\n      </h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientDevice;\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { ClientSocket, useSocket } from \"use-socketio\";\nimport Home from \"./Home\";\nimport SensorDevice from \"./SensorDevice\";\nimport ClientDevice from \"./ClientDevice\";\n\nconst App = () => (\n  <ClientSocket url=\"https://kraw3k.ct8.pl/\">\n    <Router>\n      <div>\n        <Route exact path={process.env.PUBLIC_URL + \"/\"} component={Home} />\n        <Route exact path={process.env.PUBLIC_URL + \"/client\"} component={ClientDevice} />\n        <Route exact path={process.env.PUBLIC_URL + \"/sensor\"} component={SensorDevice} />\n      </div>\n    </Router>\n  </ClientSocket>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}